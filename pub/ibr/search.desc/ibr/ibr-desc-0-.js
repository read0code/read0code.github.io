searchState.loadedDescShard("ibr", 0, "Describe datafile information by sdi page\nDump index page user records\nPrint basic information.\nList all page. page_type, page_number and more\nRedo log print\nPrint SDI json\nView page data with given page_no.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput innodb datafile. for example departments.ibd\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all: index, segment, extent, page, …\nThe block number, starts from 0.\nDump the B+ tree root\nDump given log_type redo blocks, log_type like MLOG_xxx, …\nList extent data\nDump the garbage list\nList index data\nLimit the total data rows\nLimit the total row in the dump\nList page data\nThe page number, starts from 0.\nThe page number, starts from 0.\nPrint index root segements\nList segment data\nPrint parsed table definition\nPrint more information\nnumber of element per line\nbasic meta information\npage type statistic\nlist page metadata, page_type, page_no, space_id, etc.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nget block buffer\ncount the log block\nextent descriptor cache, map[page_no, boffset] =&gt; XDesEntry\nget file header buffer\nget file buffer\ndata file handler\ndata file size\nReturns the argument unchanged.\nconstruct the datafile factory\nsegment descriptor cache, the inode cache, map[page_no, …\nCalls <code>U::from(self)</code>.\nget page buffer\ncount the page\ntarget datafile\nFreshly allocated page\nUncompressed BLOB page\nBase Page Structure\nBase Page Body\nClean Bit\nCompressed page\nCompressed and Encrypted page\ns_dd_dict_space_id, The dd::Tablespace::id of the …\ns_dd_sys_space_id, The dd::Tablespace::id of innodb_system.\ns_dd_temp_space_id, The dd::Tablespace::id of …\ns_dict_space_id, The data dictionary tablespace ID.\nMySQL Double Write Buffer Info, see trx0sys.h, …\nEncrypted page\nEncrypted R-tree page\nFree Bit\ndata dictionary header page, in tablespace 0\nfirst rollback segment page, in tablespace 0\nFile space header\nThe following pages exist in the system tablespace (space …\ninsert buffer B-tree root page in tablespace 0; The ibuf …\ntransaction system header, in tablespace 0\nFile Segment Header, see fsp0types.h/page0types.h\nFile Address\nFIL Header, see fil0types.h\nFIL Trailer, see fil0types.h\nFSP Header, see fsp0types.h, FSP_FLAGS_WIDTH_xxxx\nFSP Header, see fsp0fsp.h\nFile Space Header Page\nFile List Base Node\nFile List Node\nInsert buffer bitmap\nInsert buffer free list\nB-tree node\nIndex node\nINode Entry, see fsp0fsp.h\nFile Segment Inode, see fsp0fsp.h\nIndex Page Header, see page0types.h\nIndex Page\ns_temp_space_id, The innodb_temporary tablespace ID.\ns_invalid_space_id, Use maximum UINT value to indicate …\nLegacy doublewrite buffer page.\nData pages of uncompressed LOB\nThe first page of an uncompressed LOB\nIndex pages of uncompressed LOB\nMySQL Log Info, see trx0sys.h\nPage Direction\nPage Format, redundant or compact\nPage Number\nMySQL Page Type, see fil0fil.h\nRollback Segment Array page\nThe RSEG ARRAY base version is a number derived from the …\nRollback Segment Header Page, see trx0rseg.h\nRollback Segment Header Page, see trx0rseg.h\nRollback segment information, see trx0sys.h\nR-tree node\ns_log_space_id, The first ID of the redo log …\nRollback Segment Header, see trx0rseg.h\nTablespace SDI Index page\nUncompressed SDI BLOB page\nCompressed SDI BLOB page\nSystem page\nSDI Meta Data\nSDI Index Page, see ibd2sdi.cc\nnormal space ID\nTablespace ID\nTRX_SYS_SPACE, Space id of the transaction system page …\nTransaction system data\nThe offset of the doublewrite buffer header on the trx …\ncontains an undo log of an active transaction\ncached for quick reuse\ncontains undo entries for inserts\ncontains an undo log of a prepared transaction\ncontains an undo log of a prepared transaction for a …\ncontains an undo log of a prepared transaction that has …\ninsert undo segment can be freed\nupdate undo segment will not be reused: it can be freed in …\ncontains undo entries for updates and delete markings: in …\ns_min_temp_space_id, s_max_temp_space_id, for temporary …\nTransaction System Page, see trx0sys.h\nundefined page type\nUndo log page\nuniversal page size, 16k\nthis value when flushing pages.\nThis page type is unused.\nUNDO Log Page, see trx0undo.h\nUndo Page Header, see trx0undo.h\nStates of an undo log segment\nTypes of an undo log segment\nUndo Segment Header, see trx0undo.h\ns_min_undo_space_id, s_max_undo_space_id. undo tablespace …\nExtent descriptor page\nExtent Descriptor Entry, see fsp0fsp.h\nExtent Descriptor Page, much-like FileSpaceHeaderPageBody, …\nExtent Descriptor State\nFirst compressed BLOB page\nSubsequent compressed BLOB page\nData pages of compressed LOB\nThe first page of a compressed LOB\nFragment pages of compressed LOB.\nIndex pages of fragment pages (compressed LOB).\nIndex pages of compressed LOB.\n(4 bytes) Block 1 start page number\n(4 bytes) Block 2 start page number\n(4 bytes) TRX_SYS_MYSQL_LOG_MAGIC_N_FLD\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\n(4*128 bytes) The start of the array of rollback segment …\n(1 bit) ATOMIC_BLOBS flag.  The ability to break up a long …\n(4 bytes) Block 1 start page number\n(4 bytes) Block 2 start page number\n(4 bytes) TRX_SYS_MYSQL_LOG_MAGIC_N_FLD\n(16 bytes) XDES bitmap. total 64 entries (1 extent = 64 …\n(2 bytes) Byte offset within the page\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\n(4 bytes) checksum, FIL_PAGE_SPACE_OR_CHKSUM\n(4 bytes) Old-style Checksum, FIL_PAGE_END_LSN_OLD_CHKSUM\n(1 bit) DATA_DIR flag.  This flag indicates that the …\nrecord header\n(112 bytes) double write log info\n(1 bit) ENCRYPTION flag.  This flag indicates that the …\n(38 bytes) File page header\n(8 bytes) File page trailer\n(6 bytes) first node link\n(12 bytes) list node data\n(8 bytes) flush LSN, FIL_PAGE_FILE_FLUSH_LSN\n(16 bytes) list of partially free extents not belonging to …\n(4 bytes) minimum page number for which the free list has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n(4*32 bytes) file segment fragment array\n(16 bytes) free file segment\n(16 bytes) full used file segment\n(10 bytes) segment header\n(10 bytes) fseg header\n(10 bytes) This is the pointer to the file segment inode …\n(10 bytes) TRX_RSEG_FSEG_HEADER, Header for the file …\n(10 bytes) leaf segment header, FSEG header\n(10 bytes) non-leaf segment header, FSEG header\n(8 bytes) file segment ID\n(4 bytes) file segment magic number, FSEG_MAGIC_N_VALUE = …\n(16 bytes) not full used file segment\n(4 bytes) number of file segment that not full used\n(4 bytes) fsp_space_t.flags, see fsp0types.h, …\n(4 bytes) number of used pages in the FSP_FREE_FRAG list\n(16 bytes) list of free extents\n(112 bytes) file space header\n(4 bytes) current size of the space in pages\n(16 bytes) list of full extents not belonging to any …\n(16 bytes) TRX_RSEG_HISTORY, The update undo logs for …\n(4 bytes) TRX_RSEG_HISTORY_SIZE, Number of file pages …\n(36 bytes) index header\n(13*2 bytes) system record\n(192*85 bytes) INode entries\n(12 bytes) The list node for linking segment inode pages, …\nINode sequence\n(16 bytes) list of pages containing segment headers, where …\n(16 bytes) list of pages containing segment headers, where …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(6 bytes) last node link\n(4 bytes) Length\n(524 bytes) log info for binlog\n(512 bytes) MySQL log file name, TRX_SYS_MYSQL_LOG_NAME\n(8 bytes) log offset …\n(8 bytes) LSN for last page modification, FIL_PAGE_LSN\n(4 bytes) Low 32-bits of LSN, last 4 bytes of FIL_PAGE_LSN\n(4 bytes) TRX_SYS_MYSQL_LOG_MAGIC_N_FLD\n(4 bytes) TRX_RSEG_MAX_SIZE, Maximum allowed size for …\n(6 bytes) next node link\n(4 bytes) next page, FIL_PAGE_NEXT\n(4 bytes) not used now\n(2 bytes) byte offset\nPage body, the data of this page\n(2 bytes) last insert direction: PAGE_LEFT, …\n(2*N bytes) page directory, grows “downwards” from …\n(1 bit) page format, steal 1 bit from page_n_heap\n(2 bytes) pointer to start of page free record list\n(2 bytes) TRX_UNDO_PAGE_FREE, On each page of the undo log …\n(2 bytes) number of bytes in deleted records\n(2 bytes) pointer to record heap top\n(8 bytes) index id where the page belongs. This field …\n(2 bytes) pointer to the last inserted record, or NULL if …\n(2 bytes) level of the node in an index tree; the leaf …\n(8 bytes) the highest id of a trx which may have modified …\n(2 bytes) number of slots in page directory\n(2 bytes) number of consecutive inserts to the same …\n(15 bits) number of records in the heap, bit 15=flag: …\n(2 bytes) number of user records on the page\n(4 bytes) page number/offset, FIL_PAGE_OFFSET\n(4 bytes) Page number within a space\n(4 bytes) page number\n(4 bytes) page number\n(12 bytes) TRX_UNDO_PAGE_NODE, The file list node in the …\n(4 bit) Number of flag bits used to indicate the …\n(2 bytes) TRX_UNDO_PAGE_START, Byte offset where the undo …\n(2 bytes) page type, FIL_PAGE_TYPE\n(2 bytes) TRX_UNDO_PAGE_TYPE, TRX_UNDO_INSERT or …\n(1 bit) POST_ANTELOPE flag.\n(6 bytes) previous node link\n(4 bytes) previous page, FIL_PAGE_PREV\n(4 bytes) The current number of rollback segments being …\n(34 bytes) rollback segment header\n(8 * 128 bytes) the array of rollback segment …\n(4 bytes) The RSEG ARRAY version offset in the header.\n(1 bit) SDI flag.  This flag indicates the presence of …\n(8 bytes) next segment id, 8 bytes which give the first …\n(8 bytes) segment ID\n(1 bit) SHARED flag.  This flag indicates that the …\n(4 bytes) space ID, FIL_PAGE_SPACE_ID\n(4 bytes) tablespace ID\n(4 bytes) space id\n(4 bytes) space ID\n(4 bytes) magic number\n(4 bytes) XDES state\n(1 bit) TEMPORARY flag.  This flag indicates that the …\n(8 bytes) Transaction ID\n(10 bytes) Header for the file segment which the undo log …\n(2 bytes) Offset of the last undo log header on the …\nUndo Log\n(18 bytes) undo page header\n(16 bytes) Base node for the list of pages in the undo log …\n(30 bytes) undo segment header\n(4*1024 bytes) undo segment slots\n(2 bytes) undo state\n(18 bit) the UNUSED bits\nXDES entries that initialized\nXDES entries that initialized\n(40*255 bytes) extent descriptor entry list\nAll XDES entries\nXDes entry sequence\n(4 bit) Number of flag bits used to indicate the …\nMark current column is deleted\nrow data value\nField datum, data bytes\nField metadata\nInstant Column DDL flag, see WL#11250: Support Instant Add …\nMark current column is minimum record\nThe deleted flag in info bits; when bit is set to 1, it …\nThe instant ADD COLUMN flag. When it is set to 1, it means …\nInfo bit denoting the predefined minimum record: this bit …\nUse this bit to indicate record has version\nRecord Info Flag\nRecord\nRecord Header\nRecord Layout\nRecord Status, rec.h:152\nRow data\nRow Info, var_area and nil_area\nVersion flag, see INSTANT ADD and DROP Column blog series, …\npage address\npage offset\npage offset\npage address, [nilfld, varfld], access in reverse order\npage address\npage address\npage address\npage data buffer\npage data buffer\npage data buffer\npage data buffer\nrow data list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\npatch byte for VERSION and INSTANT flags is on\n(13 bits) Heap Number\nwhich index in table_def\n(4 bits) info_bits, MIN_REC/DELETED/VERSION/INSTANT flags, …\nOriginal byte for info_bits\ninstant add column flag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nis null value\nrow length\nlogical exists\nrow metadata list\nnumber of instant column\n(4 bits) Number of owned records\n(2 bytes) Next record offset\ncolumn opx\ncolumn opx\nphysical exists\nrow buffer\n(5 bytes) record header\n(3 bits) Record Status, see rec.h\nrecord status\nresolve node_ptr\nresolve ordinary record\nrow data\nrow info\nrow information\nrow version\ntable definition\nthe caller is creating the index or wants to bypass the …\nindex field fixed\nindex field nullable\nindex flags\nthe caller of btr_cur_optimistic_update() or …\nbtr_cur_pessimistic_update() must keep cursor position …\nsys fields will be found in the update vector or inserted …\nMask used to get the highest bit in the hdr_no field. In …\nMaximum allowed block’s number (stored in hdr_no) …\nlog block, see log0constants.h\nlog checkpoint, see log0constants.h\nlog file, see log0constants.h\nlog file header, see log0constants.h\nlog record, see recv_parse_log_rec(…)\nlog record header, see mtr0log.ic, …\ntypes of a redo log record\none byte is written\n2 bytes …\n4 bytes …\n8 bytes …\ncopy compact record list end to a new created index page\ndelete compact record list end on index page\ndelete compact record list start on index page\ncreate a compact index page\ncreate a R-tree compact page\ncreate a SDI compact page\nreorganize an index page\nmark compact clustered index record deleted\ndelete a compact record from a page\ncompact record insert\nmark a compact index record as the predefined minimum …\nmark compact secondary index record deleted; this log …\nupdate of a compact record, preserves record field sizes\ndummy log record used to pad a log block full\nlog record about creating an .ibd file, with format\ndelete a tablespace file that starts with …\nExtend the space\nrename a tablespace file that starts with …\ninitialize an ibuf bitmap page\nnotify that an index tree is being loaded without writing …\nthis means that a file page is taken into use and the …\nthis means that a file page is taken into use. We use it …\nCopy record list end to a new created index page\nDelete record list end on index page\nDelete record list start on index page\nCurrent LSN\nIf a single mtr writes several log records, this log …\nCreate an index page\nCreate a R-Tree index page\ncreate a SDI index page\nReorganize an index page in ROW_FORMAT=REDUNDANT\nMark clustered index record deleted\nDelete a record from a page\nRecord insert\nmark an index record as the predefined minimum record\nMark secondary index record deleted\nupdate of a record, preserves record field sizes\nif the mtr contains only one log record for one page, i.e.,\nif the mtr contains only one log record for one page, i.e.,\nlog for some persistent dynamic metadata change\nUsed in tests of redo log. It must never be used outside …\nTable is being truncated. (Marked only for …\nerase an undo log page end\ncreate an undo log header\nreuse an insert undo log header\ninitialize a page in an undo log\nInsert entry in an undo log\nwrite a string to a page\ncompress an index page\ncompress an index page without logging it’s image\nreorganize a compressed page\nwrite the BLOB pointer of an externally stored column on a …\nwrite to compressed page header\nwrite the node pointer of a record on a compressed …\ndo no record lock checking\ndo no undo logging\nThe next value should be smaller or equal to the smallest …\nThe biggest type, which should be 1 bigger than the last …\nPersistent Metadata type for corrupted indexes\nThe smallest type, which should be 1 less than the first …\nPersistent Metadata type for autoinc counter\nPersistent dynamic metadata type, there should be 1 to 1 …\nredo log index info, see mlog_parse_index(…)\nlog record payload for file delete, see …\nlog record payload for nByte, see mlog_parse_nbytes(…)\nlog record payload for marking a clustered index record …\nlog record payload for delete record, see …\nlog record payload for insert record, see …\nlog record payload for marking a secondary index record …\nlog record payload for update record in-place, see …\nlog record payload for log for some persistent dynamic …\nlog record payload for parsing a redo log record of adding …\nlog record payload for parsing the redo log entry of an …\nredo record updated fields\nredo record payload, see recv_parse_or_apply_log_rec_body(…\nbiggest value (used in assertions)\nfile address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\npage address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock address\nblock 0: is log file header\nblock 1: LOG_CHECKPOINT_1 or unused\nblock 2: LOG_ENCRYPTION or Unused\nblock 3: LOG_CHECKPOINT_2 or unused\nblock number, nth block in redo log file\nblock number, nth block in redo log file\nblock number, nth block in redo log file\nfile data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\npage data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\nblock data buffer\n(8 bytes) LOG_CHECKPOINT_LSN, Checkpoint lsn. Recovery …\n(8 bytes) checkpoint number\n(4 bytes) last checksum\n(4 bytes) last checksum\n(32 bytes) A null-terminated string which will contain …\n(??? bytes) insert content data\n(data_len bytes) insert content data\n(2 bytes) log data length, see LOG_BLOCK_HDR_DATA_LEN, …\ndata_len = (end_seg_len &gt;&gt; 1)\n(2 bytes) data length\nend_seg_flag = (end_seg_len &amp; 0x1)\n(compressed) length of mismatch_index, lowest bit is …\n(4 bytes) checkpoint number, see LOG_BLOCK_EPOCH_NO. …\n(field_len bytes) data, see length for total size\n(1-5 bytes) key length\n(1-5 bytes) field number\n(??? bytes) file name\n(2 bytes) first record offset, see …\n(1 bit) log flush flag, the bit from log_block_no\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nguessed LSN\n(4 bytes) log block number, see LOG_BLOCK_HDR_NO, Offset …\n(2*n bytes) index fields info\n(1 byte) index flags\nsee index_flags\nredo log index info\nredo log index info\nredo log index info\nredo log index info\n(1 byte) index log version\n(1 byte)\n(1 byte) info bits\n(2 bytes) number of column before first instant add was …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(2 bytes) file name length\nother block is log block\n(4 bytes) log group id, Log file header format identifier …\n(4 bytes) 32 BITs flag, log header flags\nlog record header\n(1 byte) log record type\nredo log record\n(4 bytes) log uuid, Offset within the log file header, to …\n(compressed) the inserted index record end segment which …\n(1 byte) flags, Mode flags for btr_cur operations; these …\n(1 byte) flags, Mode flags for btr_cur operations; these …\n(2 bytes) number of index fields\n(1-5 bytes) number of field\n(2 bytes) n_uniq for index\n(2 bytes) offset\n(2 bytes) offset\n(2 bytes) offset\n(2 bytes) offset\n(2 bytes) offset\n(compressed) length of record header\nPage number\n(2 bytes) page offset\nparse mode flags\n(1 byte) persistent_type, see …\nlog record payload\n(7 bytes) rollback pointer\n(7 bytes) rollback pointer\nsequence number\n(1 bit) single record flag, highest bit on log_rec_type, …\nspace ID\n(8 bytes) start LSN, LSN of the start of data in this log …\n(much compressed) table id, see …\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\ntotal bytes\n(5-9 bytes) transaction ID\n(5-9 bytes) transaction ID\n(much compressed) transaction ID\n(1-5 bytes) TRX_ID position in record\n(1-5 bytes) TRX_ID position in record\nupdated fields\n(1..4 bytes) value\n(1 byte) value\n(1 byte) value\n(much compressed) version\nSDI Data Header\nSDI Record\npage address\npage address\npage data buffer\npage data buffer\n(4 bytes) Length of COMPRESSED_LEN field in record of SDI …\n(8 bytes) Data ID\n(4 bytes) Length of TYPE field in record of SDI Index\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nrecord header\n(7 bytes) Rollback pointer\nSDI Data Header\nSDI Data String, uncompressed string\n(6 bytes) Transaction ID\n(4 bytes) Length of UNCOMPRESSED_LEN field in record of …\ncompilation info is multiplied by this and ORed to the …\nStates of an undo log segment\ndelete marking of a record; fields do not change\nTRX_UNDO_FLAG_GTID, undo log header includes GTID …\nOperation type flags used in trx_undo_report_row_operation\nfresh insert into clustered index\nIf this bit is set in type_cmpl, then the undo log record …\nOperation type flags used in trx_undo_report_row_operation\nCompilation info flags: these must fit within 2 bits; see …\nno record field size will be changed in the update\nparsed rollback pointer\ncompilation info is multiplied by this and ORed to the …\ntrue if undo log header includes GTID information from …\ntrue if undo log header includes GTID information for XA …\ntrue if undo log header includes X/Open XA transaction …\nIf this bit is set in type_cmpl, then the undo log record …\nThis bit can be ORed to type_cmpl to denote that we …\nupdate of a delete marked record to a not delete marked …\nupdate of a non-delete-marked record\nThis bit can be ORed to type_cmpl to denote that we …\nno secondary index record will be changed in the update …\nno record field size will be changed in the update\nextra flags: modify BLOB, update external, …\nstates of an undo log segment\nundo log, see trx0undo.h\nundo log header, see trx0undo.h\nsee trx_undo_page_report_insert(…)\nsee trx_undo_page_report_modify(..)\nundo record key fields\nundo record updated fields\nundo record\nundo record header\nundo record payload\nstates of an undo log segment\nTRX_UNDO_FLAG_XA_PREPARE_GTID, undo log header includes …\nTRX_UNDO_FLAG_XID, undo log header includes X/Open XA …\nXID data size\nX/Open XA transaction identification, see trx0undo.h\nthe default value: 0\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\npage address\n(2 bytes) page offset\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\npage data buffer\ncompilation info, see info_bytes\n(2 bytes) TRX_UNDO_DEL_MARKS, Defined only in an update …\n(1 byte), TRX_UNDO_DICT_TRANS, true if the transaction is …\nupdate external flags\n(field_len bytes) field data, see length for total size\n(1-5 bytes) field length\n(1-5 bytes) field number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n(12 bytes) TRX_UNDO_HISTORY_NODE, If the log is put to the …\n(1 byte) info bits\n(1 bit) insert flag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(key_len bytes) key data, see length for total size\nkey fields\nkey fields\n(1-5 bytes) key length\n(2 bytes) TRX_UNDO_LOG_START, Offset of the first undo log …\n(1-5 bytes) updated field count\nintroducing a change in undo log format\n(2 bytes) TRX_UNDO_NEXT_LOG, Offset of the next undo log …\n(2 bytes) next record offset\n(4 bytes) page number\n(2 bytes) TRX_UNDO_PREV_LOG, Offset of the previous undo …\n(2 bytes) previous record offset\n(1..11 bytes) rollback pointer, in compressed form\n(7 bits) rollback segment id\nsequence number\nsequence number\n(8 bytes) TRX_UNDO_TABLE_ID, Id of the table if the …\n(1..11 bytes) table id, in much compressed form\n(1..11 bytes) table id, in much compressed form\ntotal bytes\ntotal bytes\n(8 bytes) TRX_UNDO_TRX_ID, Transaction id\n(1..11 bytes) transaction id, in compressed form\n(8 bytes) TRX_UNDO_TRX_NO, Transaction number of the …\n(1 byte) type, extern flag, compilation info\ntype info, see info_bytes\nsee undo_flags_bits\n(1 byte) TRX_UNDO_FLAGS, Transaction UNDO flags in one …\n(186 bytes) undo log header\n(1..11 bytes) undo number, in much compressed form\n(1..11 bytes) undo number, in much compressed form\nundo record payload\nundo record header\nundo record headers\nupdated fields\n(7 bytes) original rollback pointer bytes value\n(4 bytes) TRX_UNDO_XA_BQUAL_LEN xid_t::bqual_length\n(128 bytes) XA Data, distributed trx identifier. not …\n(4 bytes) TRX_UNDO_XA_FORMAT, xid_t::formatID\n(4 bytes) TRX_UNDO_XA_TRID_LEN xid_t::gtrid_length\n(140 bytes) XA\nsee INFORMATION_SCHEMA.COLLATIONS for more details\nfind collation by id\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncolumn definition\ncolumn keys, see sql/dd/types/column.h\ncolumn type, see sql/dd/types/column.h, enum class …\nThe column is completely invisible to the server\nThe column is visible to the server, but hidden from the …\nUser table column marked as INVISIBLE by using the column …\nThe column is visible (a normal column)\ncolumn hidden type, see sql/dd/types/column.h, enum class …\nindex algorithm, see sql/dd/types/index.h, enum class …\nindex definition\nindex element definition\nindex order, see sql/dd/types/index.h, enum class …\nindex type, see sql/dd/types/index.h, enum class …\nrow format, see sql/dd/types/table.h, enum enum_row_format\ntable definition\nindex algorithm\ncharacter set name\ncharacter set name\ncolumn definitions\nhidden type\ncolumn key type\ncolumn name\nreferenced column name\ncollation\ncollation name\ncollation name\ncollation, see INFORMATION_SCHEMA.COLLATIONS\nsee write_opx_reference(w, m_column, STRING_WITH_LEN(“…\ncomment\ncomment\ndata length in bytes\ndata length\ndata dictionary type\ndefault value in se_private_data\nelement length\nindex elememts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhidden type\nhidden\nhidden\nindex definitions\nindex id\nindex name\nindex root page_no\nindex type\nindicate how many columns exist before first instant ADD …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nis nullable field\nis variadic field\norder, ASC/DESC\nphysical position\nordinal position\nordinal position\nordinal position\nrow format\nschema name\ntable name\ntable id\ntable id\nutf8 column definition\nutf8 column definition\nwhich version this column was added\nwhich version this column waw dropped\nsee sql/dd/impl/types/column_impl.h, class Column_impl : …\nData Dictionary Column Elements\nsee sql/dd/impl/types/index_impl.h, class Index_impl : …\nData Dictionary Index Elements\nEntry Object Enums\nSDI Entry\nSDI Table Object\nSDI Tablespace Object\nData Dictionary Object\nData Dictionary Object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the size of an ulint when written in the compressed …\nRead a ulint in a compressed form.\nReads a 32-bit integer in much compressed form.\nReads a 64-bit integer in compressed form.\nReads a 64-bit integer in much compressed form.\nsigned(1), year_month(17), day(5), hour(5), minute(6), …\nenumeration value\nsigned(1), year(14), month(4), day(5)\nu32 =&gt; unix timestamp")